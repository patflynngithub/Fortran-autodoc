var tipuesearch = {"pages":[{"title":" FORD Fortran Autodoc exerciser ","text":"FORD Fortran Autodoc exerciser Exercising the FORD Fortran Autodoc program to be sure that it supports the autodocing of desired Fortran elements. Also show the available features of FORD and how to get them to work. Developer Info Patrick Flynn","tags":"home","loc":"index.html"},{"title":"int_class_t – FORD Fortran Autodoc exerciser ","text":"type, public :: int_class_t Holds the integer structure Contents Type-Bound Procedures set_value Type-Bound Procedures procedure, public :: set_value => set_value_int_class Sets the integer structure interface For submodule public module subroutine set_value_int_class(this, value) Arguments Type Intent Optional Attributes Name class( int_class_t ), intent(inout) :: this integer, intent(in) :: value","tags":"","loc":"type/int_class_t.html"},{"title":"int_class_extended_t – FORD Fortran Autodoc exerciser ","text":"type, public, extends( int_class_t ) :: int_class_extended_t Adds capability to check if an integer has been stored Contents Type-Bound Procedures set_value is_set Type-Bound Procedures procedure, public :: set_value => set_value_int_class_extended Stores integer and records that this storage happened interface For submodule public module subroutine set_value_int_class_extended(this, value) Arguments Type Intent Optional Attributes Name class( int_class_extended_t ), intent(inout) :: this integer, intent(in) :: value procedure, public :: is_set => is_set_int_class_extended Has an integer been stored yet? interface For submodule public module function is_set_int_class_extended(this) Arguments Type Intent Optional Attributes Name class( int_class_extended_t ), intent(in) :: this Return Value logical","tags":"","loc":"type/int_class_extended_t.html"},{"title":"real_class_t – FORD Fortran Autodoc exerciser ","text":"type, public :: real_class_t Holds the real structure Contents Type-Bound Procedures set_value Type-Bound Procedures procedure, public :: set_value => set_value_real_class Sets the real structure interface For submodule public module subroutine set_value_real_class(this, value) Arguments Type Intent Optional Attributes Name class( real_class_t ), intent(inout) :: this real, intent(in) :: value","tags":"","loc":"type/real_class_t.html"},{"title":"real_class_extended_t – FORD Fortran Autodoc exerciser ","text":"type, public, extends( real_class_t ) :: real_class_extended_t Adds capability to check if a real has been stored Contents Type-Bound Procedures set_value is_set Type-Bound Procedures procedure, public :: set_value => set_value_real_class_extended Stores real and records that this storage happened interface For submodule public module subroutine set_value_real_class_extended(this, value) Arguments Type Intent Optional Attributes Name class( real_class_extended_t ), intent(inout) :: this real, intent(in) :: value procedure, public :: is_set => is_set_real_class_extended Has a real been stored yet? interface For submodule public module function is_set_real_class_extended(this) Arguments Type Intent Optional Attributes Name class( real_class_extended_t ), intent(in) :: this Return Value logical","tags":"","loc":"type/real_class_extended_t.html"},{"title":"complex_class_t – FORD Fortran Autodoc exerciser ","text":"type, public :: complex_class_t Holds the complex structure Contents Type-Bound Procedures set_value Type-Bound Procedures procedure, public :: set_value => set_value_complex_class Sets the complex structure interface For submodule public module subroutine set_value_complex_class(this, value) Arguments Type Intent Optional Attributes Name class( complex_class_t ), intent(inout) :: this complex, intent(in) :: value","tags":"","loc":"type/complex_class_t.html"},{"title":"complex_class_extended_t – FORD Fortran Autodoc exerciser ","text":"type, public, extends( complex_class_t ) :: complex_class_extended_t Adds capability to check if a complex has been stored Contents Type-Bound Procedures set_value is_set Type-Bound Procedures procedure, public :: set_value => set_value_complex_class_extended Stores complex and records that this storage happened interface For submodule public module subroutine set_value_complex_class_extended(this, value) Arguments Type Intent Optional Attributes Name class( complex_class_extended_t ), intent(inout) :: this complex, intent(in) :: value procedure, public :: is_set => is_set_complex_class_extended Has a complex been stored yet? interface For submodule public module function is_set_complex_class_extended(this) Arguments Type Intent Optional Attributes Name class( complex_class_extended_t ), intent(in) :: this Return Value logical","tags":"","loc":"type/complex_class_extended_t.html"},{"title":"int_struct_t – FORD Fortran Autodoc exerciser ","text":"type, public :: int_struct_t Holds an integer value Contents Variables value Components Type Visibility Attributes Name Initial integer, public :: value","tags":"","loc":"type/int_struct_t.html"},{"title":"real_struct_t – FORD Fortran Autodoc exerciser ","text":"type, public :: real_struct_t Holds a real value Contents Variables value Components Type Visibility Attributes Name Initial real, public :: value","tags":"","loc":"type/real_struct_t.html"},{"title":"complex_struct_t – FORD Fortran Autodoc exerciser ","text":"type, public :: complex_struct_t Holds a complex value Contents Variables value Components Type Visibility Attributes Name Initial complex, public :: value","tags":"","loc":"type/complex_struct_t.html"},{"title":"main_dummy_vars_fcn1 – FORD Fortran Autodoc exerciser","text":"function main_dummy_vars_fcn1(bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) Main program function (return type defined in body) that exercises the dummy variables for autodoc program Defines return type in body of function output   [in]    string to output Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer Just wanted a function. Return value not meaningful. Contents","tags":"","loc":"proc/main_dummy_vars_fcn1.html"},{"title":"main_dummy_vars_fcn2 – FORD Fortran Autodoc exerciser","text":"function main_dummy_vars_fcn2(bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) Main program function (return type defined in first line) that exercises the dummy variables for autodoc program Defines return type in first line of function output   [in]    string to output Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer Contents","tags":"","loc":"proc/main_dummy_vars_fcn2.html"},{"title":"main_dummy_vars_fcn3 – FORD Fortran Autodoc exerciser","text":"function main_dummy_vars_fcn3(bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) result(val) Main program function (return type and result name defined in first line) that exercises the dummy variables for autodoc program Defines return type and alternate result name  in first line of function output   [in]    string to output Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer Contents","tags":"","loc":"proc/main_dummy_vars_fcn3.html"},{"title":"main_dummy_vars_sub – FORD Fortran Autodoc exerciser","text":"subroutine main_dummy_vars_sub(bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) Main program subroutine that exercises the dummy variables for autodoc program output   [in]    string to output Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Contents","tags":"","loc":"proc/main_dummy_vars_sub.html"},{"title":"a_mod_dummy_vars_fcn1 – FORD Fortran Autodoc exerciser","text":"public  function a_mod_dummy_vars_fcn1(bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) a_mod module function (return type defined in body) that exercises the dummy variables for autodoc program Defines return type in body of function output   [in]    string to output Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer Just wanted a function. Return value not meaningful. Contents","tags":"","loc":"proc/a_mod_dummy_vars_fcn1.html"},{"title":"a_mod_dummy_vars_fcn2 – FORD Fortran Autodoc exerciser","text":"public  function a_mod_dummy_vars_fcn2(bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) a_mod module function (return type defined in first line) that exercises the dummy variables for autodoc program Defines return type in first line of function output   [in]    string to output Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer Contents","tags":"","loc":"proc/a_mod_dummy_vars_fcn2.html"},{"title":"a_mod_dummy_vars_fcn3 – FORD Fortran Autodoc exerciser","text":"public  function a_mod_dummy_vars_fcn3(bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) result(val) a_mod module function (return type and result name defined in first line) that exercises the dummy variables for autodoc program Defines return type and alternate result name  in first line of function output   [in]    string to output Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer Contents","tags":"","loc":"proc/a_mod_dummy_vars_fcn3.html"},{"title":"a_mod_dummy_vars_sub – FORD Fortran Autodoc exerciser","text":"public  subroutine a_mod_dummy_vars_sub(bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) a_mod module subroutine that exercises the dummy variables for autodoc program output   [in]    string to output Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Contents","tags":"","loc":"proc/a_mod_dummy_vars_sub.html"},{"title":"is_set_int_class_extended – FORD Fortran Autodoc exerciser","text":"interface For submodule public module function is_set_int_class_extended(this) Arguments Type Intent Optional Attributes Name class( int_class_extended_t ), intent(in) :: this Return Value logical","tags":"","loc":"interface/is_set_int_class_extended.html"},{"title":"is_set_real_class_extended – FORD Fortran Autodoc exerciser","text":"interface For submodule public module function is_set_real_class_extended(this) Arguments Type Intent Optional Attributes Name class( real_class_extended_t ), intent(in) :: this Return Value logical","tags":"","loc":"interface/is_set_real_class_extended.html"},{"title":"is_set_complex_class_extended – FORD Fortran Autodoc exerciser","text":"interface For submodule public module function is_set_complex_class_extended(this) Arguments Type Intent Optional Attributes Name class( complex_class_extended_t ), intent(in) :: this Return Value logical","tags":"","loc":"interface/is_set_complex_class_extended.html"},{"title":"set_value_int_class – FORD Fortran Autodoc exerciser","text":"interface For submodule public module subroutine set_value_int_class(this, value) Arguments Type Intent Optional Attributes Name class( int_class_t ), intent(inout) :: this integer, intent(in) :: value","tags":"","loc":"interface/set_value_int_class.html"},{"title":"set_value_int_class_extended – FORD Fortran Autodoc exerciser","text":"interface For submodule public module subroutine set_value_int_class_extended(this, value) Arguments Type Intent Optional Attributes Name class( int_class_extended_t ), intent(inout) :: this integer, intent(in) :: value","tags":"","loc":"interface/set_value_int_class_extended.html"},{"title":"set_value_real_class – FORD Fortran Autodoc exerciser","text":"interface For submodule public module subroutine set_value_real_class(this, value) Arguments Type Intent Optional Attributes Name class( real_class_t ), intent(inout) :: this real, intent(in) :: value","tags":"","loc":"interface/set_value_real_class.html"},{"title":"set_value_real_class_extended – FORD Fortran Autodoc exerciser","text":"interface For submodule public module subroutine set_value_real_class_extended(this, value) Arguments Type Intent Optional Attributes Name class( real_class_extended_t ), intent(inout) :: this real, intent(in) :: value","tags":"","loc":"interface/set_value_real_class_extended.html"},{"title":"set_value_complex_class – FORD Fortran Autodoc exerciser","text":"interface For submodule public module subroutine set_value_complex_class(this, value) Arguments Type Intent Optional Attributes Name class( complex_class_t ), intent(inout) :: this complex, intent(in) :: value","tags":"","loc":"interface/set_value_complex_class.html"},{"title":"set_value_complex_class_extended – FORD Fortran Autodoc exerciser","text":"interface For submodule public module subroutine set_value_complex_class_extended(this, value) Arguments Type Intent Optional Attributes Name class( complex_class_extended_t ), intent(inout) :: this complex, intent(in) :: value","tags":"","loc":"interface/set_value_complex_class_extended.html"},{"title":"a_mod – FORD Fortran Autodoc exerciser","text":"Fortran module with module-level variable and procedures Uses kinds_mod Contents Variables a_mod_bool1 a_mod_bool2 a_mod_bool3 a_mod_bool4 a_mod_boolarray1 a_mod_boolarray2 a_mod_int1 a_mod_int2 a_mod_int3 a_mod_int4 a_mod_int5 a_mod_int6 a_mod_intarray1 a_mod_intarray2 a_mod_real1 a_mod_real2 a_mod_real3 a_mod_real4 a_mod_real5 a_mod_real6 a_mod_realarray1 a_mod_realarray2 a_mod_a_char a_mod_string1 a_mod_string2 a_mod_stringarray1 a_mod_stringarray2 Functions a_mod_dummy_vars_fcn1 a_mod_dummy_vars_fcn2 a_mod_dummy_vars_fcn3 Subroutines a_mod_dummy_vars_sub Variables Type Visibility Attributes Name Initial logical, public :: a_mod_bool1 logical :: a_mod_bool1 logical, public :: a_mod_bool2 logical :: a_mod_bool2 logical, public :: a_mod_bool3 logical :: a_mod_bool3 logical, public :: a_mod_bool4 logical :: a_mod_bool4 logical, public :: a_mod_boolarray1 (2) logical :: a_mod_boolarray1(2) logical, public, dimension(3) :: a_mod_boolarray2 logical, dimension(3) :: a_mod_boolarray2 integer, public :: a_mod_int1 integer :: a_mod_int1 integer, public :: a_mod_int2 integer :: a_mod_int2 integer, public :: a_mod_int3 integer :: a_mod_int3 integer, public :: a_mod_int4 integer :: a_mod_int4 integer(kind=8), public :: a_mod_int5 integer(8) :: a_mod_int5 integer(kind=long), public :: a_mod_int6 integer(kind=long) :: a_mod_int6 integer, public :: a_mod_intarray1 (3) integer :: a_mod_intarray1(3) integer, public, dimension(4) :: a_mod_intarray2 integer, dimension(4) :: a_mod_intarray2 real, public :: a_mod_real1 real :: a_mod_real1 real, public :: a_mod_real2 real :: a_mod_real2 real, public :: a_mod_real3 real :: a_mod_real3 real, public :: a_mod_real4 real :: a_mod_real4 real(kind=8), public :: a_mod_real5 real(8) :: a_mod_real5 real(kind=dp), public :: a_mod_real6 real(kind=dp) :: a_mod_real6 real, public :: a_mod_realarray1 (5) real :: a_mod_realarray1(5) real, public, dimension(6) :: a_mod_realarray2 real, dimension(6) :: a_mod_realarray2 character, public :: a_mod_a_char character :: a_mod_a_char character(len=20), public :: a_mod_string1 character(20) :: a_mod_string1 character(len=21), public :: a_mod_string2 character(21) :: a_mod_string2 character(len=22), public, dimension(2) :: a_mod_stringarray1 character(22), dimension(2) :: a_mod_stringarray1 character(len=23), public :: a_mod_stringarray2 (3) character(len=23) :: a_mod_stringarray2(3) Functions public  function a_mod_dummy_vars_fcn1 (bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) a_mod module function (return type defined in body) that exercises the dummy variables for autodoc program Read more… Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer Just wanted a function. Return value not meaningful. public  function a_mod_dummy_vars_fcn2 (bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) a_mod module function (return type defined in first line) that exercises the dummy variables for autodoc program Read more… Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer public  function a_mod_dummy_vars_fcn3 (bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) result(val) a_mod module function (return type and result name defined in first line) that exercises the dummy variables for autodoc program Read more… Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer Subroutines public  subroutine a_mod_dummy_vars_sub (bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) a_mod module subroutine that exercises the dummy variables for autodoc program Read more… Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output","tags":"","loc":"module/a_mod.html"},{"title":"kinds_mod – FORD Fortran Autodoc exerciser","text":"Fortran kinds module Contents Variables long dp Variables Type Visibility Attributes Name Initial integer, public, parameter :: long = 8 integer, public, parameter :: dp = kind(1.d0)","tags":"","loc":"module/kinds_mod.html"},{"title":"classes_mod – FORD Fortran Autodoc exerciser","text":"Class derived types module Uses types_mod Used by Descendants: complex_class_submod int_class_submod real_class_submod Contents Interfaces is_set_int_class_extended is_set_real_class_extended is_set_complex_class_extended set_value_int_class set_value_int_class_extended set_value_real_class set_value_real_class_extended set_value_complex_class set_value_complex_class_extended Derived Types int_class_t int_class_extended_t real_class_t real_class_extended_t complex_class_t complex_class_extended_t Interfaces interface For submodule public module function is_set_int_class_extended(this) Arguments Type Intent Optional Attributes Name class( int_class_extended_t ), intent(in) :: this Return Value logical interface For submodule public module function is_set_real_class_extended(this) Arguments Type Intent Optional Attributes Name class( real_class_extended_t ), intent(in) :: this Return Value logical interface For submodule public module function is_set_complex_class_extended(this) Arguments Type Intent Optional Attributes Name class( complex_class_extended_t ), intent(in) :: this Return Value logical interface For submodule public module subroutine set_value_int_class(this, value) Arguments Type Intent Optional Attributes Name class( int_class_t ), intent(inout) :: this integer, intent(in) :: value interface For submodule public module subroutine set_value_int_class_extended(this, value) Arguments Type Intent Optional Attributes Name class( int_class_extended_t ), intent(inout) :: this integer, intent(in) :: value interface For submodule public module subroutine set_value_real_class(this, value) Arguments Type Intent Optional Attributes Name class( real_class_t ), intent(inout) :: this real, intent(in) :: value interface For submodule public module subroutine set_value_real_class_extended(this, value) Arguments Type Intent Optional Attributes Name class( real_class_extended_t ), intent(inout) :: this real, intent(in) :: value interface For submodule public module subroutine set_value_complex_class(this, value) Arguments Type Intent Optional Attributes Name class( complex_class_t ), intent(inout) :: this complex, intent(in) :: value interface For submodule public module subroutine set_value_complex_class_extended(this, value) Arguments Type Intent Optional Attributes Name class( complex_class_extended_t ), intent(inout) :: this complex, intent(in) :: value Derived Types type, public :: int_class_t Holds the integer structure Type-Bound Procedures procedure\n                    ,                  public\n                  :: set_value => set_value_int_class Interface Sets the integer structure type, public, extends( int_class_t ) :: int_class_extended_t Adds capability to check if an integer has been stored Type-Bound Procedures procedure\n                    ,                  public\n                  :: set_value => set_value_int_class_extended Interface Stores integer and records that this storage happened procedure\n                    ,                  public\n                  :: is_set => is_set_int_class_extended Interface Has an integer been stored yet? type, public :: real_class_t Holds the real structure Type-Bound Procedures procedure\n                    ,                  public\n                  :: set_value => set_value_real_class Interface Sets the real structure type, public, extends( real_class_t ) :: real_class_extended_t Adds capability to check if a real has been stored Type-Bound Procedures procedure\n                    ,                  public\n                  :: set_value => set_value_real_class_extended Interface Stores real and records that this storage happened procedure\n                    ,                  public\n                  :: is_set => is_set_real_class_extended Interface Has a real been stored yet? type, public :: complex_class_t Holds the complex structure Type-Bound Procedures procedure\n                    ,                  public\n                  :: set_value => set_value_complex_class Interface Sets the complex structure type, public, extends( complex_class_t ) :: complex_class_extended_t Adds capability to check if a complex has been stored Type-Bound Procedures procedure\n                    ,                  public\n                  :: set_value => set_value_complex_class_extended Interface Stores complex and records that this storage happened procedure\n                    ,                  public\n                  :: is_set => is_set_complex_class_extended Interface Has a complex been stored yet?","tags":"","loc":"module/classes_mod.html"},{"title":"types_mod – FORD Fortran Autodoc exerciser","text":"Struct derived types module Contents Derived Types int_struct_t real_struct_t complex_struct_t Derived Types type, public :: int_struct_t Holds an integer value Components Type Visibility Attributes Name Initial integer, public :: value type, public :: real_struct_t Holds a real value Components Type Visibility Attributes Name Initial real, public :: value type, public :: complex_struct_t Holds a complex value Components Type Visibility Attributes Name Initial complex, public :: value","tags":"","loc":"module/types_mod.html"},{"title":"complex_class_submod – FORD Fortran Autodoc exerciser","text":"Complex class submodule (no redeclaration of module declarations) Uses Ancestors: classes_mod Contents None","tags":"","loc":"module/complex_class_submod.html"},{"title":"int_class_submod – FORD Fortran Autodoc exerciser","text":"Integer class submodule (redeclares module declarations) Uses Ancestors: classes_mod Contents None","tags":"","loc":"module/int_class_submod.html"},{"title":"real_class_submod – FORD Fortran Autodoc exerciser","text":"Real class submodule (no redeclaration of module declarations) Uses Ancestors: classes_mod Contents None","tags":"","loc":"module/real_class_submod.html"},{"title":"main – FORD Fortran Autodoc exerciser","text":"Uses a_mod kinds_mod classes_mod FORD Fortran autodoc exerciser program Contents Variables logical_value int_value real_value bool1 bool2 bool3 bool4 boolarray1 boolarray2 int1 int2 int3 int4 int5 int6 intarray1 intarray2 real1 real2 real3 real4 real5 real6 realarray1 realarray2 a_char string1 string2 stringarray1 stringarray2 stored_int stored_real stored_complex Functions main_dummy_vars_fcn1 main_dummy_vars_fcn2 main_dummy_vars_fcn3 Subroutines main_dummy_vars_sub Variables Type Attributes Name Initial logical :: logical_value pre-doc comment integer :: int_value post-doc comment real :: real_value pre-doc comment\npost-doc comment logical :: bool1 logical :: bool1 logical :: bool2 logical :: bool2 logical :: bool3 logical :: bool3 logical :: bool4 logical :: bool4 logical :: boolarray1 (2) logical :: boolarray1(2) logical, dimension(3) :: boolarray2 logical, dimension(3) :: boolarray2 integer :: int1 integer :: int1 integer :: int2 integer :: int2 integer :: int3 integer :: int3 integer :: int4 integer :: int4 integer(kind=8) :: int5 integer(8) :: int5 integer(kind=long) :: int6 integer(kind=long) :: int6 integer :: intarray1 (3) integer :: intarray1(3) integer, dimension(4) :: intarray2 integer, dimension(4) :: intarray2 real :: real1 real :: real1 real :: real2 real :: real2 real :: real3 real :: real3 real :: real4 real :: real4 real(kind=8) :: real5 real(8) :: real5 real(kind=dp) :: real6 real(kind=dp) :: real6 real :: realarray1 (5) real :: realarray1(5) real, dimension(6) :: realarray2 real, dimension(6) :: realarray2 character :: a_char character :: a_char character(len=20) :: string1 character(20) :: string1 character(len=21) :: string2 character(21) :: string2 character(len=22), dimension(2) :: stringarray1 character(22), dimension(2) :: stringarray1 character(len=23) :: stringarray2 (3) character(len=23) :: stringarray2(3) type( int_class_extended_t ) :: stored_int pre-doc comment\npost-doc comment type( real_class_extended_t ) :: stored_real pre-doc comment\npost-doc comment type( complex_class_extended_t ) :: stored_complex pre-doc comment\npost-doc comment Functions function main_dummy_vars_fcn1 (bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) Main program function (return type defined in body) that exercises the dummy variables for autodoc program Read more… Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer Just wanted a function. Return value not meaningful. function main_dummy_vars_fcn2 (bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) Main program function (return type defined in first line) that exercises the dummy variables for autodoc program Read more… Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer function main_dummy_vars_fcn3 (bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) result(val) Main program function (return type and result name defined in first line) that exercises the dummy variables for autodoc program Read more… Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output Return Value integer Subroutines subroutine main_dummy_vars_sub (bool1, bool2, bool3, bool4, boolarray1, boolarray2, int1, int2, int3, int4, int5, int6, intarray1, intarray2, real1, real2, real3, real4, real5, real6, realarray1, realarray2, a_char, string1, string2, stringarray1, stringarray2, output) Main program subroutine that exercises the dummy variables for autodoc program Read more… Arguments Type Intent Optional Attributes Name logical :: bool1 logical :: bool1 logical, intent(in) :: bool2 logical, intent(in) :: bool2 logical, intent(out) :: bool3 logical, intent(out) :: bool3 logical, intent(inout) :: bool4 logical, intent(inout) :: bool4 logical, intent(inout) :: boolarray1 (2) logical, intent(inout) :: boolarray1(2) logical, intent(in), dimension(3) :: boolarray2 logical, dimension(3), intent(in) :: boolarray2 integer :: int1 integer :: int1 integer, intent(in) :: int2 integer, intent(in) :: int2 integer, intent(out) :: int3 integer, intent(out) :: int3 integer, intent(inout) :: int4 integer, intent(inout) :: int4 integer(kind=8), intent(in) :: int5 integer(8), intent(in) :: int5 integer(kind=long), intent(in) :: int6 integer(kind=long), intent(in) :: int6 integer, intent(inout) :: intarray1 (3) integer, intent(inout) :: intarray1(3) integer, intent(in), dimension(4) :: intarray2 integer, dimension(4), intent(in) :: intarray2 real :: real1 real :: real1 real, intent(in) :: real2 real, intent(in) :: real2 real, intent(out) :: real3 real, intent(out) :: real3 real, intent(inout) :: real4 real, intent(inout) :: real4 real(kind=8), intent(in) :: real5 real(8), intent(in) :: real5 real(kind=dp), intent(in) :: real6 real(kind=dp), intent(in) :: real6 real, intent(inout) :: realarray1 (5) real, intent(inout) :: realarray1(5) real, intent(in), dimension(6) :: realarray2 real, dimension(6), intent(in) :: realarray2 character, intent(in) :: a_char character, intent(in) :: a_char character(len=20), intent(in) :: string1 character(20), intent(in) :: string1 character(len=21), intent(out) :: string2 character(21), intent(out) :: string2 character(len=22), intent(inout), dimension(2) :: stringarray1 character(22), dimension(2), intent(inout) :: stringarray1 character(len=23), intent(inout) :: stringarray2 (3) character(len=23), intent(inout) :: stringarray2(3) character(len=*), intent(in) :: output What to output\ncharacter(len=*), intent(in) :: output","tags":"","loc":"program/main.html"},{"title":"main.F90 – FORD Fortran Autodoc exerciser","text":"Contents Programs main Source Code main.F90 Source Code !> FORD Fortran autodoc exerciser program program main use kinds_mod use a_mod use classes_mod implicit none !> pre-doc comment logical :: logical_value integer :: int_value !! post-doc comment !> pre-doc comment real :: real_value !! post-doc comment ! -------------------------------------------------------------------------- ! declarations duplicated in post-doc comments so see how the autodoc program ! processes the declarations ! --------------------------------------------------------------------------- logical :: bool1 !! logical :: bool1 logical :: bool2 !! logical :: bool2 logical :: bool3 !! logical :: bool3 logical :: bool4 !! logical :: bool4 logical :: boolarray1 ( 2 ) !! logical :: boolarray1(2) logical , dimension ( 3 ) :: boolarray2 !! logical, dimension(3) :: boolarray2 integer :: int1 !! integer :: int1 integer :: int2 !! integer :: int2 integer :: int3 !! integer :: int3 integer :: int4 !! integer :: int4 integer ( 8 ) :: int5 !! integer(8) :: int5 integer ( kind = long ) :: int6 !! integer(kind=long) :: int6 integer :: intarray1 ( 3 ) !! integer :: intarray1(3) integer , dimension ( 4 ) :: intarray2 !! integer, dimension(4) :: intarray2 real :: real1 !! real :: real1 real :: real2 !! real :: real2 real :: real3 !! real :: real3 real :: real4 !! real :: real4 real ( 8 ) :: real5 !! real(8) :: real5 real ( kind = dp ) :: real6 !! real(kind=dp) :: real6 real :: realarray1 ( 5 ) !! real :: realarray1(5) real , dimension ( 6 ) :: realarray2 !! real, dimension(6) :: realarray2 character :: a_char !! character :: a_char character ( 20 ) :: string1 !! character(20) :: string1 character ( 21 ) :: string2 !! character(21) :: string2 character ( 22 ), dimension ( 2 ) :: stringarray1 !! character(22), dimension(2) :: stringarray1 character ( len = 23 ) :: stringarray2 ( 3 ) !! character(len=23) :: stringarray2(3) !> pre-doc comment type ( int_class_extended_t ) :: stored_int !! post-doc comment !> pre-doc comment type ( real_class_extended_t ) :: stored_real !! post-doc comment !> pre-doc comment type ( complex_class_extended_t ) :: stored_complex !! post-doc comment ! ------------------------------------------- ! ! Classes module method calls ! if ( stored_int % is_set ()) then write ( * , * ) \"int stored\" else write ( * , * ) \"int not stored\" end if if ( stored_real % is_set ()) then write ( * , * ) \"real stored\" else write ( * , * ) \"real not stored\" end if if ( stored_complex % is_set ()) then write ( * , * ) \"complex stored\" else write ( * , * ) \"complex not stored\" end if ! This is just a normal comment that will not be in autodoc write ( * , * ) \"Storing integer\" call stored_int % set_value ( int_value ) if ( stored_int % is_set ()) then write ( * , * ) \"int stored\" else write ( * , * ) \"int not stored\" end if write ( * , * ) \"Storing real\" call stored_real % set_value ( 3.14 ) if ( stored_real % is_set ()) then write ( * , * ) \"real stored\" else write ( * , * ) \"real not stored\" end if write ( * , * ) \"Storing complex\" call stored_complex % set_value ( cmplx ( 1.0 , 2.0 )) if ( stored_complex % is_set ()) then write ( * , * ) \"complex stored\" else write ( * , * ) \"complex not stored\" end if ! ------------------------------------------- ! ! Main program procedure calls ! ! This is just a normal comment that will not be in autodoc call main_dummy_vars_sub ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & \"Hello\" ) ! This is just a normal comment that will not be in autodoc int_value = main_dummy_vars_fcn1 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & \"there.\" ) ! This is just a normal comment that will not be in autodoc int_value = main_dummy_vars_fcn2 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & \"How\" ) ! This is just a normal comment that will not be in autodoc int_value = main_dummy_vars_fcn3 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & \"are\" ) ! ------------------------------------------- ! ! a_mod module procedure calls ! ! This is just a normal comment that will not be in autodoc call a_mod_dummy_vars_sub ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & \"you\" ) ! This is just a normal comment that will not be in autodoc int_value = a_mod_dummy_vars_fcn1 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & \"today?\" ) ! This is just a normal comment that will not be in autodoc int_value = a_mod_dummy_vars_fcn2 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & \"What's\" ) ! This is just a normal comment that will not be in autodoc int_value = a_mod_dummy_vars_fcn3 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & \"up?\" ) contains !> Main program subroutine that exercises the dummy variables for autodoc program !! !!   output   [in]    string to output subroutine main_dummy_vars_sub ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & output ) implicit none #include \"dummy_vars.inc\" write ( * , * ) \"main_dummy_vars_sub: \" , output end subroutine main_dummy_vars_sub !> Main program function (return type defined in body) that exercises the dummy variables for autodoc program !! !! Defines return type in body of function !! !!   output   [in]    string to output function main_dummy_vars_fcn1 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & output ) implicit none !> Just wanted a function. Return value not meaningful. integer :: main_dummy_vars_fcn1 #include \"dummy_vars.inc\" write ( * , * ) \"main_dummy_vars_fcn1: \" , output main_dummy_vars_fcn1 = 1 end function main_dummy_vars_fcn1 !> Main program function (return type defined in first line) that exercises the dummy variables for autodoc program !! !! Defines return type in first line of function !! !!   output   [in]    string to output integer function main_dummy_vars_fcn2 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & output ) implicit none #include \"dummy_vars.inc\" write ( * , * ) \"main_dummy_vars_fcn2: \" , output main_dummy_vars_fcn2 = 2 end function main_dummy_vars_fcn2 !> Main program function (return type and result name defined in first line) that exercises the dummy variables for autodoc program !! !! Defines return type and alternate result name  in first line of function !! !!   output   [in]    string to output integer function main_dummy_vars_fcn3 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & output ) result ( val ) implicit none #include \"dummy_vars.inc\" write ( * , * ) \"main_dummy_vars_fcn3: \" , output val = 3 end function main_dummy_vars_fcn3 end program main","tags":"","loc":"sourcefile/main.f90.html"},{"title":"complex_class_submod.F90 – FORD Fortran Autodoc exerciser","text":"Contents Submodules complex_class_submod Source Code complex_class_submod.F90 Source Code !> Complex class submodule (no redeclaration of module declarations) submodule ( classes_mod ) complex_class_submod contains module procedure set_value_complex_class this % complex_struct % value = value end procedure set_value_complex_class module procedure set_value_complex_class_extended call this % complex_class_t % set_value ( value ) this % value_set = . TRUE . end procedure set_value_complex_class_extended module procedure is_set_complex_class_extended is_set_complex_class_extended = this % value_set end procedure is_set_complex_class_extended end submodule complex_class_submod","tags":"","loc":"sourcefile/complex_class_submod.f90.html"},{"title":"a_mod.F90 – FORD Fortran Autodoc exerciser","text":"Contents Modules a_mod Source Code a_mod.F90 Source Code !> Fortran module with module-level variable and procedures module a_mod use kinds_mod implicit none complex , private :: a_private_variable ! -------------------------------------------------------------------------- ! declarations duplicated in post-doc comments so see how the autodoc program ! processes the declarations ! --------------------------------------------------------------------------- logical :: a_mod_bool1 !! logical :: a_mod_bool1 logical :: a_mod_bool2 !! logical :: a_mod_bool2 logical :: a_mod_bool3 !! logical :: a_mod_bool3 logical :: a_mod_bool4 !! logical :: a_mod_bool4 logical :: a_mod_boolarray1 ( 2 ) !! logical :: a_mod_boolarray1(2) logical , dimension ( 3 ) :: a_mod_boolarray2 !! logical, dimension(3) :: a_mod_boolarray2 integer :: a_mod_int1 !! integer :: a_mod_int1 integer :: a_mod_int2 !! integer :: a_mod_int2 integer :: a_mod_int3 !! integer :: a_mod_int3 integer :: a_mod_int4 !! integer :: a_mod_int4 integer ( 8 ) :: a_mod_int5 !! integer(8) :: a_mod_int5 integer ( kind = long ) :: a_mod_int6 !! integer(kind=long) :: a_mod_int6 integer :: a_mod_intarray1 ( 3 ) !! integer :: a_mod_intarray1(3) integer , dimension ( 4 ) :: a_mod_intarray2 !! integer, dimension(4) :: a_mod_intarray2 real :: a_mod_real1 !! real :: a_mod_real1 real :: a_mod_real2 !! real :: a_mod_real2 real :: a_mod_real3 !! real :: a_mod_real3 real :: a_mod_real4 !! real :: a_mod_real4 real ( 8 ) :: a_mod_real5 !! real(8) :: a_mod_real5 real ( kind = dp ) :: a_mod_real6 !! real(kind=dp) :: a_mod_real6 real :: a_mod_realarray1 ( 5 ) !! real :: a_mod_realarray1(5) real , dimension ( 6 ) :: a_mod_realarray2 !! real, dimension(6) :: a_mod_realarray2 character :: a_mod_a_char !! character :: a_mod_a_char character ( 20 ) :: a_mod_string1 !! character(20) :: a_mod_string1 character ( 21 ) :: a_mod_string2 !! character(21) :: a_mod_string2 character ( 22 ), dimension ( 2 ) :: a_mod_stringarray1 !! character(22), dimension(2) :: a_mod_stringarray1 character ( len = 23 ) :: a_mod_stringarray2 ( 3 ) !! character(len=23) :: a_mod_stringarray2(3) contains !> a_mod module subroutine that exercises the dummy variables for autodoc program !! !!   output   [in]    string to output subroutine a_mod_dummy_vars_sub ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & output ) implicit none #include \"dummy_vars.inc\" write ( * , * ) \"a_mod_dummy_vars_sub: \" , output end subroutine a_mod_dummy_vars_sub !> a_mod module function (return type defined in body) that exercises the dummy variables for autodoc program !! !! Defines return type in body of function !! !!   output   [in]    string to output function a_mod_dummy_vars_fcn1 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & output ) implicit none !> Just wanted a function. Return value not meaningful. integer :: a_mod_dummy_vars_fcn1 #include \"dummy_vars.inc\" write ( * , * ) \"a_mod_dummy_vars_fcn1: \" , output a_mod_dummy_vars_fcn1 = 1 end function a_mod_dummy_vars_fcn1 !> a_mod module function (return type defined in first line) that exercises the dummy variables for autodoc program !! !! Defines return type in first line of function !! !!   output   [in]    string to output integer function a_mod_dummy_vars_fcn2 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & output ) implicit none #include \"dummy_vars.inc\" write ( * , * ) \"a_mod_dummy_vars_fcn2: \" , output a_mod_dummy_vars_fcn2 = 2 end function a_mod_dummy_vars_fcn2 !> a_mod module function (return type and result name defined in first line) that exercises the dummy variables for autodoc program !! !! Defines return type and alternate result name  in first line of function !! !!   output   [in]    string to output integer function a_mod_dummy_vars_fcn3 ( bool1 , bool2 , bool3 , bool4 , boolarray1 , boolarray2 , & int1 , int2 , int3 , int4 , int5 , int6 , intarray1 , intarray2 , & real1 , real2 , real3 , real4 , real5 , real6 , realarray1 , realarray2 , & a_char , string1 , string2 , stringarray1 , stringarray2 , & output ) result ( val ) implicit none #include \"dummy_vars.inc\" write ( * , * ) \"a_mod_dummy_vars_fcn3: \" , output val = 3 end function a_mod_dummy_vars_fcn3 end module a_mod","tags":"","loc":"sourcefile/a_mod.f90.html"},{"title":"int_class_submod.F90 – FORD Fortran Autodoc exerciser","text":"Contents Submodules int_class_submod Source Code int_class_submod.F90 Source Code !> Integer class submodule (redeclares module declarations) submodule ( classes_mod ) int_class_submod contains module subroutine set_value_int_class ( this , value ) class ( int_class_t ), intent ( inout ) :: this integer , intent ( in ) :: value this % int_struct % value = value end subroutine set_value_int_class module subroutine set_value_int_class_extended ( this , value ) class ( int_class_extended_t ), intent ( inout ) :: this integer , intent ( in ) :: value call this % int_class_t % set_value ( value ) this % value_set = . TRUE . end subroutine set_value_int_class_extended module function is_set_int_class_extended ( this ) logical :: is_set_int_class_extended class ( int_class_extended_t ), intent ( in ) :: this is_set_int_class_extended = this % value_set end function is_set_int_class_extended end submodule int_class_submod","tags":"","loc":"sourcefile/int_class_submod.f90.html"},{"title":"real_class_submod.F90 – FORD Fortran Autodoc exerciser","text":"Contents Submodules real_class_submod Source Code real_class_submod.F90 Source Code !> Real class submodule (no redeclaration of module declarations) submodule ( classes_mod ) real_class_submod contains module procedure set_value_real_class this % real_struct % value = value end procedure set_value_real_class module procedure set_value_real_class_extended call this % real_class_t % set_value ( value ) this % value_set = . TRUE . end procedure set_value_real_class_extended module procedure is_set_real_class_extended is_set_real_class_extended = this % value_set end procedure is_set_real_class_extended end submodule real_class_submod","tags":"","loc":"sourcefile/real_class_submod.f90.html"},{"title":"kinds_mod.F90 – FORD Fortran Autodoc exerciser","text":"Contents Modules kinds_mod Source Code kinds_mod.F90 Source Code !> Fortran kinds module module kinds_mod integer , parameter :: long = 8 integer , parameter :: dp = kind ( 1.d0 ) end module kinds_mod","tags":"","loc":"sourcefile/kinds_mod.f90.html"},{"title":"classes_mod.F90 – FORD Fortran Autodoc exerciser","text":"Contents Modules classes_mod Source Code classes_mod.F90 Source Code !> Class derived types module module classes_mod use types_mod implicit none ! -------------------------------------------------------------------------- ! Integer class ! !> Holds the integer structure type int_class_t private type ( int_struct_t ) :: int_struct contains !> Sets the integer structure procedure :: set_value => set_value_int_class end type int_class_t !> Adds capability to check if an integer has been stored type , extends ( int_class_t ) :: int_class_extended_t private !> integer has not been stored = .FALSE. (default), has been stored = .TRUE. logical :: value_set = . FALSE . contains !> Stores integer and records that this storage happened procedure :: set_value => set_value_int_class_extended !> Has an integer been stored yet? procedure :: is_set => is_set_int_class_extended end type int_class_extended_t ! -------------------------------------------------------------------------- ! Real class ! !> Holds the real structure type real_class_t private type ( real_struct_t ) :: real_struct contains !> Sets the real structure procedure :: set_value => set_value_real_class end type real_class_t !> Adds capability to check if a real has been stored type , extends ( real_class_t ) :: real_class_extended_t private !> real has not been stored = .FALSE. (default), has been stored = .TRUE. logical :: value_set = . FALSE . contains !> Stores real and records that this storage happened procedure :: set_value => set_value_real_class_extended !> Has a real been stored yet? procedure :: is_set => is_set_real_class_extended end type real_class_extended_t ! -------------------------------------------------------------------------- ! Complex class ! #define _TYPEDEF #include \"complex_type.inc\" #undef _TYPEDEF !> For submodule interface ! -------------------------------------------------------------------------- ! Integer class ! module subroutine set_value_int_class ( this , value ) class ( int_class_t ), intent ( inout ) :: this integer , intent ( in ) :: value end subroutine set_value_int_class module subroutine set_value_int_class_extended ( this , value ) class ( int_class_extended_t ), intent ( inout ) :: this integer , intent ( in ) :: value end subroutine set_value_int_class_extended module function is_set_int_class_extended ( this ) logical :: is_set_int_class_extended class ( int_class_extended_t ), intent ( in ) :: this end function is_set_int_class_extended ! -------------------------------------------------------------------------- ! Real class ! module subroutine set_value_real_class ( this , value ) class ( real_class_t ), intent ( inout ) :: this real , intent ( in ) :: value end subroutine set_value_real_class module subroutine set_value_real_class_extended ( this , value ) class ( real_class_extended_t ), intent ( inout ) :: this real , intent ( in ) :: value end subroutine set_value_real_class_extended module function is_set_real_class_extended ( this ) logical :: is_set_real_class_extended class ( real_class_extended_t ), intent ( in ) :: this end function is_set_real_class_extended ! -------------------------------------------------------------------------- ! Complex class ! #include \"complex_type.inc\" end interface end module classes_mod","tags":"","loc":"sourcefile/classes_mod.f90.html"},{"title":"types_mod.F90 – FORD Fortran Autodoc exerciser","text":"Contents Modules types_mod Source Code types_mod.F90 Source Code !> Struct derived types module module types_mod implicit none !> Holds an integer value type int_struct_t integer :: value end type int_struct_t !> Holds a real value type real_struct_t real :: value end type real_struct_t !> Holds a complex value type complex_struct_t complex :: value end type complex_struct_t end module types_mod","tags":"","loc":"sourcefile/types_mod.f90.html"}]}